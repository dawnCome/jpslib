!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.jpslib=e():t.jpslib=e()}(this,function(){return function(t){function e(r){if(i[r])return i[r].exports;var n=i[r]={exports:{},id:r,loaded:!1};return t[r].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){t.exports=i(1)},function(t,e){t.exports=function(){jps.subscribe=function(t){if(!t.listNotificationInterested||"function"!=typeof t.listNotificationInterested||!t.executeNotification||"function"!=typeof t.executeNotification)throw new Error("subscriber must implement ISubscriber");var e=t.listNotificationInterested();if(!(e instanceof Array))throw new Error("interface listNotificationInterested of subscriber must return Array type");e.forEach(function(t){if("string"!=typeof t)throw new Error("interested notification name must be String type")}),jps._removeSubscribersFromMap(t),e.forEach(function(e){jps._addSubscriberToMap(e,t)})},jps.publish=function(t){if(!t.getName||"function"!=typeof t.getName)throw new Error("notification must implement INotification");var e=jps._getSubscribersFromMap(t.getName()).concat();e.forEach(function(e){e.executeNotification(t)})},jps.createNotification=function(t,e,i){if("string"==typeof t){var r=function(t,e,i){jps.INotification.call(this,t,e,i)};return jps._utils.extendClass(r,jps.INotification),new r(t,e,i)}throw new Error("notification name must be String type")},jps.unsubscribe=function(t,e){if(!e.listNotificationInterested||"function"!=typeof e.listNotificationInterested)throw new Error("subscriber must implement ISubscriber");if("string"!=typeof t)throw new Error("interested notification name must be String type");jps._removeSubscriberFromMap(t,e)},jps.unsubscribeAll=function(t){if(!t.listNotificationInterested||"function"!=typeof t.listNotificationInterested)throw new Error("subscriber must implement ISubscriber");if("string"!=typeof notificationname)throw new Error("interested notification name must be String type");jps._removeSubscribersFromMap(t)},jps._notificationMap={},jps._getSubscribersFromMap=function(t){return void 0===jps._notificationMap[t]?[]:jps._notificationMap[t]},jps._getInterestedNamesFromMap=function(t){var e,i=[];for(var r in jps._notificationMap)e=jps._notificationMap[r].filter(function(e){return e===t}),e.length>0&&i.push(r);return i},jps._hasSubscriberFromMap=function(t,e){var i=jps._getInterestedNamesFromMap(e),r=i.filter(function(e){return e===t});return r.length>0},jps._addSubscriberToMap=function(t,e){if(jps._hasSubscriberFromMap(t,e));else{var i=jps._getSubscribersFromMap(t);0===i.length&&(i=jps._notificationMap[t]=[]),i.push(e)}return!0},jps._removeSubscriberFromMap=function(t,e){var i=jps._getSubscribersFromMap(t),r=i.indexOf(e);return r>-1&&i.splice(r,1),i},jps._removeSubscribersFromMap=function(t){var e=jps._getInterestedNamesFromMap(t);return e.forEach(function(e){var i=jps._removeSubscriberFromMap(e,t);i&&0===i.length&&delete jps._notificationMap[e]}),!0},jps._utils={extendClass:function(t,e){if("function"!=typeof t)throw new TypeError("extendClass child must be function type");if("function"!=typeof e)throw new TypeError("extendClass parent must be function type");if(t!==e){var i=new Function;return i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}}},jps.ISubscriber=function(){},jps.ISubscriber.prototype.listNotificationInterested=function(){return[]},jps.ISubscriber.prototype.executeNotification=function(t){},jps.INotification=function(t,e,i){if(null===t||void 0===t)throw new Error("notification must have a name");if("string"!=typeof t)throw new TypeError("notification name must be string type");this._name=t,this._body=e,this._type=i},jps.INotification.prototype.getName=function(){return this._name},jps.INotification.prototype.getBody=function(){return this._body},jps.INotification.prototype.getType=function(){return this._type}}()}])});